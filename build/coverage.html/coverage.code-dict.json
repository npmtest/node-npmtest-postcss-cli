{"/home/travis/build/npmtest/node-npmtest-postcss-cli/test.js":"/* istanbul instrument in package npmtest_postcss_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-postcss-cli/lib.npmtest_postcss_cli.js":"/* istanbul instrument in package npmtest_postcss_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_postcss_cli = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_postcss_cli = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-postcss-cli/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-postcss-cli && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_postcss_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_postcss_cli\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_postcss_cli.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_postcss_cli.rollup.js'] =\n            local.assetsDict['/assets.npmtest_postcss_cli.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_postcss_cli.__dirname + '/lib.npmtest_postcss_cli.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-postcss-cli/node_modules/postcss-cli/index.js":"'use strict'\n\nconst fs = require('fs-promise')\nconst path = require('path')\n\nconst ora = require('ora')\nconst stdin = require('get-stdin')\nconst read = require('read-cache')\nconst chalk = require('chalk')\nconst globber = require('globby')\nconst chokidar = require('chokidar')\n\nconst postcss = require('postcss')\nconst postcssrc = require('postcss-load-config')\nconst reporter = require('postcss-reporter/lib/formatter')()\n\nconst depGraph = require('./lib/depGraph')\n\nconst logo = `\n                                      /|\\\\\n                                    //   //\n                                  //       //\n                                //___*___*___//\n                              //--*---------*--//\n                            /|| *             * ||/\n                          // ||*               *|| //\n                        //   || *             * ||   //\n                      //_____||___*_________*___||_____//\n`\n\nconst version = () => {\n  const cli = require('./package.json').version\n\n  return chalk.bold.red(`\n                                      /|\\\\\n                                    //   //\n                                  //       //\n                                //___*___*___//\n                              //--*---------*--//\n                            /|| *             * ||/\n                          // ||*    v${cli}     *|| //\n                        //   || *             * ||   //\n                      //_____||___*_________*___||_____//\n  `)\n}\n\nconst argv = require('yargs')\n  .usage(\n`${chalk.bold.red(logo)}\nUsage:\n\n  $0 [input.css] [OPTIONS] [--output|-o output.css] [--watch]`\n)\n  .option('o', {\n    alias: 'output',\n    desc: 'Output file',\n    type: 'string'\n  })\n  .option('d', {\n    alias: 'dir',\n    desc: 'Output directory',\n    type: 'string'\n  })\n  .option('r', {\n    alias: 'replace',\n    desc: 'Replace (overwrite) the input file',\n    type: 'boolean'\n  })\n  .option('u', {\n    alias: 'use',\n    desc: 'List of postcss plugins to use',\n    type: 'array'\n  })\n  .option('p', {\n    alias: 'parser',\n    desc: 'Custom postcss parser',\n    type: 'string'\n  })\n  .option('t', {\n    alias: 'stringifier',\n    desc: 'Custom postcss stringifier',\n    type: 'string'\n  })\n  .option('s', {\n    alias: 'syntax',\n    desc: 'Custom postcss syntax',\n    type: 'string'\n  })\n  .option('w', {\n    alias: 'watch',\n    desc: 'Watch files for changes and recompile as needed',\n    type: 'boolean'\n  })\n  .option('poll', {\n    desc: 'Use polling for file watching',\n    type: 'boolean'\n  })\n  .option('x', {\n    alias: 'ext',\n    desc: 'Override the output file extension',\n    type: 'string',\n    coerce (ext) {\n      if (ext.indexOf('.') !== 0) return '.' + ext\n      return ext\n    }\n  })\n  .option('e', {\n    alias: 'env',\n    desc: 'A shortcut for setting NODE_ENV',\n    type: 'string'\n  })\n  .option('b', {\n    alias: 'base',\n    desc: 'Mirror the directory structure relative to this path in the output directory, this only works together with --dir',\n    type: 'string'\n  })\n  .option('c', {\n    alias: 'config',\n    desc: 'Set a custom path to look for a config file',\n    type: 'string'\n  })\n  .alias('m', 'map')\n    .describe('m', 'Create an external sourcemap')\n    .describe('no-map', 'Disable the default inline sourcemaps')\n  .version(version).alias('v', 'version')\n  .help('h').alias('h', 'help')\n  .example('$0 input.css -o output.css', 'Basic usage')\n  .example('cat input.css | $0 -u autoprefixer > output.css', 'Piping input & output')\n  .epilog(\n`If no input files are passed, it reads from stdin. If neither -o, --dir, or --replace is passed, it writes to stdout.\n\nIf there are multiple input files, the --dir or --replace option must be passed.\n\nFor more details, please see https://github.com/postcss/postcss-cli`\n  )\n  .argv\n\nlet dir = argv.dir\n\nlet input = argv._\nlet output = argv.output\n\nif (argv.map) argv.map = { inline: false }\n\nconst spinner = ora()\n\nlet config = {\n  options: {\n    map: argv.map !== undefined ? argv.map : { inline: true },\n    parser: argv.parser ? require(argv.parser) : undefined,\n    syntax: argv.syntax ? require(argv.syntax) : undefined,\n    stringifier: argv.stringifier ? require(argv.stringifier) : undefined\n  },\n  plugins: argv.use\n    ? argv.use.map((plugin) => {\n      try {\n        return require(plugin)()\n      } catch (e) {\n        error(`Plugin Error: Cannot find module '${plugin}'`)\n      }\n    })\n    : []\n}\n\nif (argv.env) process.env.NODE_ENV = argv.env\nif (argv.config) argv.config = path.resolve(argv.config)\n\nPromise.resolve()\n  .then(() => {\n    if (input && input.length) return globber(input)\n\n    if (argv.replace || argv.dir) error('Input Error: Cannot use --dir or --replace when reading from stdin')\n\n    if (argv.watch) {\n      error('Input Error: Cannot run in watch mode when reading from stdin')\n    }\n\n    return ['stdin']\n  })\n  .then((i) => {\n    if (!i || !i.length) {\n      error('Input Error: You must pass a valid list of files to parse')\n    }\n\n    if (i.length > 1 && !argv.dir && !argv.replace) {\n      error('Input Error: Must use --dir or --replace with multiple input files')\n    }\n\n    if (i[0] !== 'stdin') i = i.map(i => path.resolve(i))\n\n    input = i\n\n    return files(input)\n  })\n  .then((results) => {\n    if (argv.watch) {\n      const watcher = chokidar.watch(\n        input.concat(dependencies(results)),\n        { usePolling: argv.poll }\n      )\n\n      if (config.file) watcher.add(config.file)\n\n      watcher\n        .on('ready', (file) => console.warn(chalk.bold.cyan('Waiting for file changes...')))\n        .on('change', (file) => {\n          let recompile = []\n\n          if (~input.indexOf(file)) recompile.push(file)\n\n          recompile = recompile.concat(\n            depGraph.dependantsOf(file).filter(file => ~input.indexOf(file))\n          )\n\n          if (!recompile.length) recompile = input\n\n          return files(recompile)\n            .then((results) => watcher.add(dependencies(results)))\n            .then(() => console.warn(chalk.bold.cyan('Waiting for file changes...')))\n            .catch(error)\n        })\n    }\n  })\n  .catch(error)\n\nfunction rc (ctx, path) {\n  if (argv.use) return Promise.resolve()\n\n  return postcssrc(ctx, path)\n    .then((rc) => {\n      if (rc.options.from || rc.options.to) {\n        error('Config Error: Can not set from or to options in config file, use CLI arguments instead')\n      }\n      config = rc\n    })\n    .catch((err) => {\n      if (err.message.indexOf('No PostCSS Config found') === -1) throw err\n    })\n}\n\nfunction files (files) {\n  if (typeof files === 'string') files = [ files ]\n\n  return Promise.all(files.map((file) => {\n    if (file === 'stdin') {\n      return stdin()\n        .then((content) => {\n          if (!content) return error('Input Error: Did not receive any STDIN')\n          return css(content, 'stdin')\n        })\n    }\n\n    return read(file)\n      .then((content) => css(content, file))\n  }))\n}\n\nfunction css (css, file) {\n  const ctx = { options: config.options }\n\n  if (file !== 'stdin') {\n    ctx.file = {\n      dirname: path.dirname(file),\n      basename: path.basename(file),\n      extname: path.extname(file)\n    }\n\n    if (!argv.config) argv.config = path.dirname(file)\n  }\n\n  const relativePath = file !== 'stdin' ? path.relative(path.resolve(), file) : file\n\n  if (!argv.config) argv.config = process.cwd()\n\n  const time = process.hrtime()\n\n  spinner.text = `Processing ${relativePath}`\n  spinner.start()\n\n  return rc(ctx, argv.config)\n    .then(() => {\n      let options = config.options\n\n      if (file === 'stdin' && output) file = output\n\n      // TODO: Unit test this\n      options.from = file === 'stdin' ? path.join(process.cwd(), 'stdin') : file\n\n      if (output || dir || argv.replace) {\n        options.to = output || (argv.replace ? file : path.join(dir, argv.base ? file.replace(path.resolve(argv.base), '') : path.basename(file)))\n\n        if (argv.ext) {\n          options.to = options.to\n            .replace(path.extname(options.to), argv.ext)\n        }\n\n        options.to = path.resolve(options.to)\n      }\n\n      if (!options.to && config.options.map && !config.options.map.inline) {\n        spinner.fail()\n        error('Output Error: Cannot output external sourcemaps when writing to STDOUT')\n      }\n\n      return postcss(config.plugins)\n        .process(css, options)\n        .then((result) => {\n          const tasks = []\n\n          if (options.to) {\n            tasks.push(fs.outputFile(options.to, result.css))\n\n            if (result.map) {\n              tasks.push(\n                fs.outputFile(\n                  options.to\n                    .replace(\n                      path.extname(options.to),\n                      path.extname(options.to) + '.map'\n                    ),\n                    result.map\n                )\n              )\n            }\n          } else {\n            spinner.text = chalk.bold.green(\n              `Finished ${relativePath} (${Math.round(process.hrtime(time)[1] / 1e6)}ms)`\n            )\n            spinner.succeed()\n            return process.stdout.write(result.css, 'utf8')\n          }\n\n          return Promise.all(tasks)\n            .then(() => {\n              spinner.text = chalk.bold.green(\n                `Finished ${relativePath} (${Math.round(process.hrtime(time)[1] / 1e6)}ms)`\n              )\n              if (result.warnings().length) {\n                spinner.fail()\n                console.warn(reporter(result))\n              } else spinner.succeed()\n\n              return result\n            })\n        })\n    }).catch((err) => {\n      spinner.fail()\n      throw err\n    })\n}\n\nfunction dependencies (results) {\n  if (!Array.isArray(results)) results = [ results ]\n\n  const messages = []\n\n  results.forEach((result) => {\n    if (result.messages <= 0) return\n\n    result.messages\n      .filter((msg) => msg.type === 'dependency' ? msg : '')\n      .map(depGraph.add)\n      .forEach((dependency) => messages.push(dependency.file))\n  })\n\n  return messages\n}\n\nfunction error (err) {\n  if (typeof err === 'string') {\n    spinner.fail(chalk.bold.red(err))\n  } else if (err.name === 'CssSyntaxError') {\n    console.error('\\n')\n\n    spinner.text = spinner.text.replace('Processing ', '')\n    spinner.fail(chalk.bold.red(`Syntax Error: ${spinner.text}`))\n\n    if (err.file) {\n      err.message = err.message.substr(err.file.length + 1)\n    } else {\n      err.message = err.message.replace('<css input>:', '')\n    }\n\n    err.message = err.message.replace(/:\\s/, '] ')\n\n    console.error('\\n', chalk.bold.red(`[${err.message}`))\n    console.error('\\n', err.showSourceCode(), '\\n\\n')\n\n    if (argv.watch) return\n  } else {\n    console.error(err)\n  }\n  process.exit(1)\n}\n","/home/travis/build/npmtest/node-npmtest-postcss-cli/node_modules/postcss-cli/lib/depGraph.js":"const path = require('path')\nconst DepGraph = require('dependency-graph').DepGraph\n\nconst graph = new DepGraph()\n\nexports.add = message => {\n  message.parent = path.resolve(message.parent)\n  message.file = path.resolve(message.file)\n\n  graph.addNode(message.parent)\n  graph.addNode(message.file)\n  graph.addDependency(message.parent, message.file)\n  return message\n}\n\nexports.dependantsOf = node => {\n  node = path.resolve(node)\n\n  if (graph.hasNode(node)) return graph.dependantsOf(node)\n  return []\n}\n"}